[{"title":"log4j使用笔记","url":"/2019/02/19/log4j/","content":"\n记录log4j使用过程中的一些笔记，包括log4j1、log4j1+slf4j、log4j2、log4j2+slf4j、log4j1和log4j2适配相关的maven依赖和简单用法笔记\n[各种依赖官方说明](https://logging.apache.org/log4j/2.x/maven-artifacts.html)\n<!-- more -->\n\n### log4j1\n- maven依赖\n\n```xml\n<dependency>\n     <groupId>log4j</groupId>\n     <artifactId>log4j</artifactId>\n     <version>1.2.16</version>\n</dependency>\n```\n- 使用样例 \n```java\nimport org.apache.log4j.Logger;\n\npublic class Log4j1Demo {\n    private static Logger logger = Logger.getLogger(Log4j1Demo.class);\n    public static void main(String[] args) {\n        logger.debug(\"=================\");\n        logger.info(\"=================\");\n        logger.warn(\"=================\");\n        logger.error(\"=================\");\n    }\n}\n```\n### log4j1+slf4j\n\n- maven依赖\n\n```xml\n        <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>1.2.16</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.6.6</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-log4j12</artifactId>\n            <version>1.6.6</version>\n        </dependency>\n```\n- 样例代码\n\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class Log4j1Slf4jDemo {\n    private static Logger logger = LoggerFactory.getLogger(Log4j1Slf4jDemo.class);\n    public static void main(String[] args) {\n        logger.debug(\"=================\");\n        logger.info(\"=================\");\n        logger.warn(\"=================\");\n        logger.error(\"=================\");\n    }\n}\n```\n\n### log4j2\n使用Log4j2时需要将log4j1的jar包依赖去掉\n- maven依赖\n\n```xml\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-api</artifactId>\n    <version>2.11.2</version>\n  </dependency>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-core</artifactId>\n    <version>2.11.2</version>\n  </dependency>\n  <dependency>\n     <groupId>com.lmax</groupId>\n     <artifactId>disruptor</artifactId>\n     <version>3.3.4</version>\n  </dependency>  \n```\n\n- 样例代码\n\n```java\nimport org.apache.log4j.LogManager;\nimport org.apache.log4j.Logger;\n\npublic class Log4j2Demo {\n    private static Logger logger = LogManager.getLogger(Log4j2Demo.class);\n    public static void main(String[] args) {\n        logger.debug(\"=================\");\n        logger.info(\"=================\");\n        logger.warn(\"=================\");\n        logger.error(\"=================\");\n    }\n}\n```\n\n### log4j2+slf4j\n\n- maven依赖\n\n```xml\n <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-api</artifactId>\n    <version>2.11.2</version>\n  </dependency>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-core</artifactId>\n    <version>2.11.2</version>\n  </dependency>\n  <dependency>\n     <groupId>com.lmax</groupId>\n     <artifactId>disruptor</artifactId>\n     <version>3.3.4</version>\n  </dependency>  \n  <dependency>\n     <groupId>org.apache.logging.log4j</groupId>\n     <artifactId>log4j-slf4j-impl</artifactId>\n     <version>2.11.2</version>\n  </dependency>\n```\n\n- 样例代码 和 *log4j1+slf4j* 的代码基本一致\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\npublic class Log4j2Slf4jDemo {\n    private static Logger logger = LoggerFactory.getLogger(Log4j2Slf4jDemo.class);\n    public static void main(String[] args) {\n        logger.debug(\"=================\");\n        logger.info(\"=================\");\n        logger.warn(\"=================\");\n        logger.error(\"=================\");\n    }\n}\n```\n\n### log4j2和log4j1桥接 \n适用于原来项目中使用了 log4j1 的api升级log4j2的场景\n\n- maven 依赖,将log4j1的依赖删除,增加log4j2的依赖包以及以下的桥接包\n\n```xml\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-1.2-api</artifactId>\n    <version>2.11.2</version>\n  </dependency>\n```\n\n\n- 样例代码\n\n```java\nimport org.apache.log4j.LogManager;\nimport org.apache.log4j.Logger;\n\npublic class Log4j12Demo {\n    private static Logger logger = Logger.getLogger(Log4j12Demo.class);\n    private static Logger logger2= LogManager.getLogger(Log4j12Demo.class);\n    public static void main(String[] args) {\n        logger.debug(\"=================\");\n        logger.info(\"=================\");\n        logger.warn(\"=================\");\n        logger.error(\"=================\");\n        logger2.debug(\"=================\");\n        logger2.info(\"=================\");\n        logger2.warn(\"=================\");\n        logger2.error(\"=================\");\n    }\n}\n```","tags":["java","日志","log4j"],"categories":["node"]},{"title":"maximo7.6安装教程","url":"/2019/02/17/maximo7-6安装教程/","content":"\nMaximo7.6安装教程，包括DB2、WebSphere\n[英文原文地址](https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Anything%20about%20Tivoli/page/Maximo%207.6%20installation%20procedure)\n\n<!-- more -->\n\n### 解压安装文件\n- 将下载的安装文件多个部分解压到一个单个文件夹中 [下载地址](https://www-304.ibm.com/support/docview.wss?uid=swg24038431)\n\n{% asset_img 01.png image %}\n### 执行launchpad64.exe.\n\n{% asset_img 02.png image %}\n### 基础配置\n- 勾选(DB2 和 WebSphere) 然后点击 Install IBM Maximo Asset Management \n\n{% asset_img 03.png image %}\n\n-  勾选所有的安装包，点击下一步\n\n{% asset_img 04.png image %}\n\n-  选择同意license\n\n{% asset_img 05.png image %}\n\n### 配置安装目录\n- 可保持默认直接点击下一步\n\n{% asset_img 06.png image %}\n\n- 可选择相应的组件更改目录 也可以保持默认\n\n{% asset_img 07.png image %}\n\n### 语言选择\n\n{% asset_img 08.png image %}\n\n### 选择所有功能\n\n{% asset_img 09.png image %}\n\n### DB2配置\n\n{% asset_img 10.png image %}\n\n### IBM HTTP Server配置\n\n{% asset_img 11.png image %}\n\n### 安装\n\n- 点击install\n\n{% asset_img 12.png image %}\n\n\n{% asset_img 13.png image %}\n\n- 选中 IBM Tivoli process automation engine configuration utility option 点击完成.\n\n\n{% asset_img 14.png image %}\n\n### 配置WebSphere\n\n- 点击 Prepare WebSphere Application Server for configuration .\n\n{% asset_img 15.png image %}\n\n- 如果安装时没有指定一下信息则保持默认，如果指定则按执行修改，点击下一步\n\n\n{% asset_img 16.png image %}\n\n- 保持默认，然后输入管理密码，此处需记录管理密码，点击下一步\n\n\n{% asset_img 17.png image %}\n\n- 保持默认点击下一步\n\n{% asset_img 18.png image %}\n\n- 选择默认授权方式\n\n{% asset_img 19.png image %}\n\n- 勾选所有选项,点击下一步\n\n{% asset_img 20.png image %}\n\n- 等待配置过程\n\n{% asset_img 21.png image %}\n\n### 安装Maximo7.6\n\n- 运行安装目录中的launchpad64.exe.选中 IBM Maximo Asset Management v7.6 然后点击 Install IBM Maximo Asset Management components \n\n{% asset_img 22.png image %}\n\n- 选中安装包，点击下一步\n\n{% asset_img 23.png image %}\n\n- 同意license\n\n{% asset_img 24.png image %}\n\n- 配置已配置的目录点击下一步\n\n{% asset_img 25.png image %}\n\n- 选中IBM Maximo Asset Management 7.6.0.0\n\n{% asset_img 26.png image %}\n\n- 点击 install\n\n{% asset_img 27.png image %}\n\n{% asset_img 28.png image %}\n\n{% asset_img 29.png image %}\n\n### 配置maximo7.6\n\n- 打开工具,点击 configure a new deployment \n\n{% asset_img 30.png image %}\n\n- 配置DB2、WebSphere及默认用户密码\n\n{% asset_img 31.png image %}\n\n- 配置主题，可以选择勾选创建一个样例数据到数据库中\n\n{% asset_img 32.png image %}\n\n- 配置DB2 instance\n\n{% asset_img 33.png image %}\n\n- 配置DB2 数据库信息\n\n{% asset_img 34.png image %}\n\n- 配置HTTP Server信息\n\n{% asset_img 35.png image %}\n\n- 配置maximo用户信息\n\n{% asset_img 36.png image %}\n\n- 选择基础语言\n\n{% asset_img 37.png image %}\n\n- 选择支持的其他语言\n\n{% asset_img 38.png image %}\n\n- 选择所有的部署选项，点击finish\n\n{% asset_img 39.png image %}\n\n- 安装过程\n\n{% asset_img 40.png image %}\n\n{% asset_img 41.png image %}\n\n### 登录maximo\n\n{% asset_img 43.png image %}\n\n{% asset_img 44.png image %}\n\n\n","tags":["maximo7.6"],"categories":["maximo"]},{"title":"Maximo7.6","url":"/2019/02/16/maximo7-6/","content":"\nMaximo7.6开发相关记录、问题处理\n\n<!-- more -->\n\n### 修改Maximo7.6皮肤样式\n修改系统属性中的 mxe.webclient.skin值为 tivoli09，需要退出重新登录\n\n在浏览器URL后增加 参数 &skin=tivoli13可修改当前会话的主题样式\n\n| 皮肤      |    描述 |\n| -------- | --------|\n| skin=tivoli09  | 7.5样式 |\n| skin=classic   | 7.1样式 |\n| skin=tivoli13  | 7.6样式 |\n\n### 修改系统Label在文本框左侧\n修改系统属性中的 mxe.webclient.verticalLabels    值为 0，然后退出重新登录。\n\n### 升级7.6.0.5后启动报 BMXAA9255E\n```text\nBMXAA9255E - The license service could not update the license application table. As a result, the License Usage Monitor application\ncannot access product application data. \nBMXAA4160E - A major exception has occurred. Check the system log to see if there are any companion errors logged. \nReport this error to your system administrator. Null\n```\n解决办法（取消'MAXLICMONITOR'服务）一下为官网英文说明\n\n```text\nResolving the problem\nThe error in the log is due to a Maximo service which is active, for licensing monitoring and according to Development it can be ignored.\n\nThat is not an issue in your Maximo product and this validation service can be turned off.\nPlease follow these steps on your Test environment.\n\n1- Log into Maximo as maxadmin\n2- Go to Database Configuration app, and from Select Action menu choose Services. \n3- Then, on the Services dialog, make sure you turn off the MAXLICMONITOR service by unchecking the Active checkbox, and then restart Maximo server for the changes to take effect.\n\nAlternatively, there is also a SQL update statement to turn the MAXLICMONITOR service off :\n\nUPDATE maxservice SET active=0 WHERE servicename='MAXLICMONITOR'\n```\n### 在Dialog中绑定非活动主对象，然后在代码中修改Mbo中字段的值时在前台dialog中刷新值\n使用 fireDataChangedEvent(); 方法\n\n### Maximo典型部署图\n![](/maximo7-6/multi_server_prodenv_complex.gif) \n\n### 各类网址\n[Maximo WIKI地址](https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/IBM%20Maximo%20Asset%20Management/page/Home)\n\n[标题栏调整修改](https://www.ibm.com/developerworks/community/forums/html/topic?id=77777777-0000-0000-0000-000014455228)","tags":["maximo7.6"],"categories":["maximo"]},{"title":"Hello World","url":"/2019/02/13/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","tags":["java","hadoop"],"categories":["node","bigdata"]}]